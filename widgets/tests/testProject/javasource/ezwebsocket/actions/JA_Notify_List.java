// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package ezwebsocket.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import ezwebsocket.WebsocketManager;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * Notify all subscribers to the context object/objectId
 * Either an action or message (or both) should be configured
 * - Action will be executed according to configuration in the client widget
 * - Message will be passed to the configured message attribute
 * - In case both are configured, the message will be set before the action is executed
 */
public class JA_Notify_List extends CustomJavaAction<java.lang.Boolean>
{
	private final java.lang.String websocketIdentifier;
	private final java.lang.String objectId;
	private final java.lang.String action;
	private final java.lang.String message;
	/** @deprecated use com.mendix.utils.ListUtils.map(UsersToNotify, com.mendix.systemwideinterfaces.core.IEntityProxy::getMendixObject) instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final java.util.List<IMendixObject> __UsersToNotify;
	private final java.util.List<system.proxies.User> UsersToNotify;

	public JA_Notify_List(
		IContext context,
		java.lang.String _websocketIdentifier,
		java.lang.String _objectId,
		java.lang.String _action,
		java.lang.String _message,
		java.util.List<IMendixObject> _usersToNotify
	)
	{
		super(context);
		this.websocketIdentifier = _websocketIdentifier;
		this.objectId = _objectId;
		this.action = _action;
		this.message = _message;
		this.__UsersToNotify = _usersToNotify;
		this.UsersToNotify = java.util.Optional.ofNullable(_usersToNotify)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(usersToNotifyElement -> system.proxies.User.initialize(getContext(), usersToNotifyElement))
			.collect(java.util.stream.Collectors.toList());
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		if (this.UsersToNotify == null || this.UsersToNotify.size() == 0) {
			throw new RuntimeException("JA_Notify_List - Users to Notify parameter cannot be null");
		}
		return WebsocketManager.notify(objectId, this.UsersToNotify, action, message, websocketIdentifier);
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_Notify_List";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
